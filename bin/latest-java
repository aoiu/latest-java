#!/usr/bin/env node
'use strict';

var fs = require('fs');
var spawnSync = require('child_process').spawnSync;

var rimraf = require('rimraf');
var log = require('spm-log');
var Queue = require('dong-queue');

var path = require('path');

function cleanup(next) {
	log.info('cleanup','begin');
	rimraf('../java', function(err) {
		if(err) {
			log.error('cleanup','java '+err);
		}
		else {
			log.info('cleanup','java done');
		}
		rimraf('../filters', function(err) {
			if(err) {
				log.error('cleanup','filters '+err);
			}
			else {
				log.info('cleanup','filters done');
			}
			log.info('cleanup', 'done');
			next();
		});
	});
}

function getCode(next) {
	log.info('getCode','begin');
	var childJava = spawnSync('svn', ['export', 'http://svn.sdp.nd/svn/admin-develop/branch/src/main/java/', path.resolve( process.cwd(), '../java'),'--username','901010']);
	var childFilters = spawnSync('svn', ['export', 'http://svn.sdp.nd/svn/admin-develop/branch/src/main/filters/', path.resolve( process.cwd(), '../filters'),'--username','901010']);
	var outputJava = childJava.stdout.toString().split('\r\n');
	var outputFilters = childFilters.stdout.toString().split('\r\n');
	outputJava.forEach(function(line) {
		if(line) {
			log.info('svn',line);
		}
	});
	outputFilters.forEach(function(line) {
		if(line) {
			log.info('svn',line);
		}
	});
	log.info('getCode','done');
	next();
}

function updateConfig(next) {
	var config = JSON.parse(fs.readFileSync('./config.json'));
	for(var key in config) {
		var filename = path.join(config[key]['path'], config[key]['name'] || key);
		var content = fs.readFileSync(filename, {encoding: 'utf-8'});
		for(var rep in config[key]['replace']) {
			var replacement = config[key]['replace'][rep];
			content = content.replace(replacement['from'], replacement['to']);
			fs.writeFileSync(filename, content);
			log.info('update',key+' '+rep);
		}
		for(var rep in config[key]['direct']) {
			var pattern = new RegExp(rep+'.*');
			var content = content.replace(pattern, rep+'='+config[key]['direct'][rep]);
			fs.writeFileSync(filename, content);
			log.info('update',key+' '+rep);
		}
	}
	next();
}

fs.exists('./config.json', function(exists) {
	if(exists) {
		var queue = new Queue();
		queue.use(function(next){
			cleanup(next);
		});
		queue.use(function(next){
			getCode(next);
		});
		queue.use(function(next){
			updateConfig(next);
		});
		queue.run(function(){
			log.info('all','done');
		});
	}
	else {
		log.error('check','connot find config.json');
		fs.writeFileSync('./config.json', fs.readFileSync(path.join(process.argv[1], '..','..','/config.json')));
		log.info('done','created a sample config.json');
		log.info('todo','please edit config.json for your project and run me again');
	}
});

